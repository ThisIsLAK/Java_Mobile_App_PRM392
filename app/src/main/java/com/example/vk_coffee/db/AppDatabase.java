package com.example.vk_coffee.db;

import android.content.Context;

import androidx.annotation.NonNull;
import androidx.room.Database;
import androidx.room.Room;
import androidx.room.RoomDatabase;
import androidx.room.migration.Migration;
import androidx.sqlite.db.SupportSQLiteDatabase;

import com.example.vk_coffee.dao.CoffeeDao;
import com.example.vk_coffee.dao.OrderDao;
import com.example.vk_coffee.dao.UserDao;
import com.example.vk_coffee.model.Coffee;
import com.example.vk_coffee.model.Order;
import com.example.vk_coffee.model.User;

@Database(entities = {User.class, Coffee.class, Order.class}, version = 6, exportSchema = false)
// üëâ TƒÉng version l√™n 6 ƒë·ªÉ Room reset l·∫°i hash schema
public abstract class AppDatabase extends RoomDatabase {

    private static volatile AppDatabase INSTANCE;

    public abstract UserDao userDao();
    public abstract CoffeeDao coffeeDao();
    public abstract OrderDao orderDao();

    // ‚úÖ Singleton ƒë·ªÉ tr√°nh t·∫°o nhi·ªÅu instance c·ªßa Room
    public static AppDatabase getInstance(Context context) {
        if (INSTANCE == null) {
            synchronized (AppDatabase.class) {
                if (INSTANCE == null) {
                    INSTANCE = Room.databaseBuilder(context.getApplicationContext(),
                                    AppDatabase.class, "vk_coffee_db")
                            .fallbackToDestructiveMigration() // ‚úÖ X√≥a DB c≈©, t·∫°o l·∫°i khi thay ƒë·ªïi schema
                            //.addMigrations(MIGRATION_4_5)    // üëâ Khi c·∫ßn gi·ªØ d·ªØ li·ªáu th√¨ thay b·∫±ng migrations
                            .build();
                }
            }
        }
        return INSTANCE;
    }

    // ‚úÖ Migration m·∫´u (n·∫øu sau n√†y c·∫ßn gi·ªØ d·ªØ li·ªáu)
    static final Migration MIGRATION_4_5 = new Migration(4, 5) {
        @Override
        public void migrate(@NonNull SupportSQLiteDatabase database) {
            // T·∫°o b·∫£ng m·ªõi v·ªõi schema m·ªõi
            database.execSQL("CREATE TABLE coffee_table_new (" +
                    "id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, " +
                    "name TEXT, " +
                    "price INTEGER NOT NULL, " +
                    "image BLOB, " +
                    "quantity INTEGER NOT NULL)");

            // Copy d·ªØ li·ªáu t·ª´ b·∫£ng c≈©
            database.execSQL("INSERT INTO coffee_table_new (id, name, price, quantity) " +
                    "SELECT id, name, price, quantity FROM coffee_table");

            // X√≥a b·∫£ng c≈©
            database.execSQL("DROP TABLE coffee_table");

            // ƒê·ªïi t√™n b·∫£ng m·ªõi th√†nh t√™n b·∫£ng c≈©
            database.execSQL("ALTER TABLE coffee_table_new RENAME TO coffee_table");
        }
    };
}
